#!/usr/bin/env python

import logging
import zmq


class Broker():

    def __init__(self, frontend_addres="tcp://*:5559", backend_address="tcp://*:5560"):
        """
        Simple XPUB/XSUB broker.
        Listens for messages on the frontend and transparently pushes them to a
        backend.
        This allows to have centralized logging, from multiple processes
        and to multiple consumers.
        Messages sent but never forwarded (f.e.x if there aren't subscribers) are
        quietly dropped.

        Args:
            frontend_addres (str): Interface to which the frontend is bound
            backend_address (str): Interface to which the backend is bound

        """
        self.context = zmq.Context()
        # Socket facing clients
        self.frontend = self.context.socket(zmq.XSUB)
        try:
            self.frontend.bind(frontend_addres)
            logging.info("XSUB listening at {}".format(frontend_addres))
        except zmq.error.ZMQError:
            logging.debug("Exiting. Broker is already running")
            return

        # Socket facing services
        self.backend = self.context.socket(zmq.XPUB)
        try:
            self.backend.bind(backend_address)
            logging.info("XPUB publishing at {}".format(backend_address))
        except zmq.error.ZMQError:
            logging.debug("Exiting. Broker is already running")
            return

    def close(self):
        self.frontend.close()
        self.backend.close()
        self.context.term()
        self.context.destroy()

    def serve_forever(self):
        try:
            zmq.proxy(self.frontend, self.backend)
        except KeyboardInterrupt:
            self.close()
            logging.debug("Exiting. Broker got <C-c>")
            return


if __name__ == "__main__":

    import logging
    import atexit

    logging.basicConfig(level="DEBUG")
    broker = Broker()
    atexit.register(broker.close)
    broker.serve_forever()
